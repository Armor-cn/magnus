"""日期"""
scalar Date
"""{[key:string]:string}"""
scalar KeyString
"""json"""
scalar Json
"""join"""
type JoinOptions {
    alias: String!
    leftJoinAndSelect: KeyString
    innerJoinAndSelect: KeyString
    leftJoin: KeyString
    innerJoin: KeyString
}
"""mutation"""
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
type User{
	id: Int
	key: String!
	title: String!
}
type UserFindAndCountResult{
	list: [User]!
	count: Int!
}
type UserFindManyOptions{
	skip: Int
	take: Int
	relations: [String!]
	join: JoinOptions
	where: UserFindConditions
}
type UserFindOneOptions{
	relations: [String]
}
type UserSubscriptionPayload{
	mutation: MutationType!
	node: User
	updatedFields: [String!]
	previousValues: User
}
type UserQuery {
	find(where:UserFindConditions): [User]!
	findAndCount(where:UserFindConditions): UserFindAndCountResult!
	count(where:UserFindConditions): Int!
	findByIds(where:UserFindConditions): Int!
}
type UserMutation{
	save(options:UserSaveInput!): UserSaveResultInput!
	remove(entities:UserRemoveInput!,options:RemoveOptions): UserRemoveResultInput!
}
type UserSubscription{
	watch(where:UserSubscriptionWhere!): UserSubscriptionPayload!
}

"""save"""
input SaveOptions {
    data: Json
    listeners: Boolean
    transaction: Boolean
    chunk: Int
    reload: Boolean
}
"""remove"""
input RemoveOptions {
    data: Json
    listeners: Boolean
    transaction: Boolean
    chunk: Int
}
input UserFindConditions{
	id: Int
	key: String
	title: String
}
input UserSubscriptionWhere{
	mutation_in: MutationType
	updatedFields_contains: String
	updatedFields_contains_every: [String!]
	updatedFields_contains_some: [String!]
	node: UserWhereInput
	AND: UserSubscriptionWhere
	OR: UserSubscriptionWhere
	NOT: UserSubscriptionWhere
}
input UserSaveInput{
	entities: User!
	options: SaveOptions
}
input UserSaveResultInput{
	code: Int
	data: User!
}
input UserRemoveInput{
	id: Int
	key: String
	title: String
}
input UserRemoveResultInput{
	code: Int
	message: String
}

type Mutation {
	User: UserMutation!

}
type Query {
	User: UserQuery!

}
type Subscription {
	User: UserSubscription!

}
