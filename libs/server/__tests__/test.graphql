scalar Date
scalar KeyString
scalar Json
type JoinOptions {
    alias: String!
    leftJoinAndSelect: KeyString
    innerJoinAndSelect: KeyString
    leftJoin: KeyString
    innerJoin: KeyString
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
type User{
	id: Int
	key: String!
	title: String!
}
type UserFindConditions{
	id: Int
	key: String
	title: String
}
type UserFindAndCountResult{
	list: [User]!
	count: Int!
}
type UserFindManyOptions{
	skip: Int
	take: Int
	relations: [String!]
	join: JoinOptions
	where: UserFindConditions
}
type UserFindOneOptions{
	relations: [String]
}
type UserSubscriptionPayload{
	mutation: MutationType!
	node: User
	updatedFields: [String!]
	previousValues: User
}


type UserSubscription{
	watch(where:UserSubscriptionWhere!): UserSubscriptionPayload!
}

input SaveOptions {
    data: Json
    listeners: Boolean
    transaction: Boolean
    chunk: Int
    reload: Boolean
}

type RemoveOptions {
    data: Json
    listeners: Boolean
    transaction: Boolean
    chunk: Int
}
input UserWhereInput{
	id: Int
	id_not: Int
	id_in: [Int!]
	id_not_in: [Int!]
	id_lt: Int
	id_lte: Int
	id_gt: Int
	id_gte: Int
	id_contains: Int
	id_not_contains: Int
	id_starts_with: Int
	id_not_starts_with: Int
	id_ends_with: Int
	id_not_ends_with: Int
	key: String
	key_not: String
	key_in: [String!]
	key_not_in: [String!]
	key_lt: String
	key_lte: String
	key_gt: String
	key_gte: String
	key_contains: String
	key_not_contains: String
	key_starts_with: String
	key_not_starts_with: String
	key_ends_with: String
	key_not_ends_with: String
	title: String
	title_not: String
	title_in: [String!]
	title_not_in: [String!]
	title_lt: String
	title_lte: String
	title_gt: String
	title_gte: String
	title_contains: String
	title_not_contains: String
	title_starts_with: String
	title_not_starts_with: String
	title_ends_with: String
	title_not_ends_with: String
}
input UserSubscriptionWhere{
	mutation_in: MutationType
	updatedFields_contains: String
	updatedFields_contains_every: [String!]
	updatedFields_contains_some: [String!]
	node: UserWhereInput
	AND: UserSubscriptionWhere
	OR: UserSubscriptionWhere
	NOT: UserSubscriptionWhere
}

