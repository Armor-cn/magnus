
scalar ObjectLiteral
scalar Date
enum MutationType {
	CREATED
	UPDATED
	DELETED
}

enum OrderType {
	ASC
	DESC
}

input User {
	id:Int!
	key:String!
	title:String!
	posts:[Post!]
}
input SaveOptions {
	listeners:Boolean
	transaction:Boolean
	chunk:Int
	reload:Boolean
}
input RemoveOptions {
	listeners:Boolean
	transaction:Boolean
	chunk:Int
}
input UserInput {
	id:Int!
	key:String!
	title:String!
	posts:[Post!]
}
input UserFindConditions {
	id:Int
	key:String
	title:String
}
input JoinOptions {
	alias:String!
	leftJoinAndSelect:ObjectLiteral
	innerJoinAndSelect:ObjectLiteral
	leftJoin:ObjectLiteral
	innerJoin:ObjectLiteral
}
input UserOrder {
	id:OrderType
	key:OrderType
	title:OrderType
}
input UserFindManyOptions {
	skip:Int
	take:Int
	where:UserFindConditions
	relations:[String!]
	join:JoinOptions
	order:UserOrder
}
input UserFindQuery {
	where:UserFindConditions!
	entity:User!
}
input UserFindByIdsQuery {
	ids:[String!]!
	options:UserFindManyOptions
}
input UserFindOneQuery {
	options:ObjectLiteral
}
input UserWatchInput {
	mutation_in:MutationType
}
input Post {
	id:Int!
	key:String!
	title:String!
	
	
	user:User!
}
input PostInput {
	id:Int!
	key:String!
	title:String!
	
	
	user:User!
}
input PostFindConditions {
	id:Int
	key:String
	title:String
	
	
}
input PostOrder {
	id:OrderType
	key:OrderType
	title:OrderType
	
	
}
input PostFindManyOptions {
	skip:Int
	take:Int
	where:PostFindConditions
	relations:[String!]
	join:JoinOptions
	order:PostOrder
}
input PostFindQuery {
	where:PostFindConditions!
	entity:Post!
}
input PostFindByIdsQuery {
	ids:[String!]!
	options:PostFindManyOptions
}
input PostFindOneQuery {
	options:ObjectLiteral
}
input PostWatchInput {
	mutation_in:MutationType
}

type UserOutput {
	id:Int!
	key:String!
	title:String!
	posts:[PostOutput!]
}
type UserInsertResult {
	identifiers:ObjectLiteral!
	generatedMaps:ObjectLiteral!
	raw:UserOutput!
}
type UserUpdateResult {
	raw:UserOutput!
	generatedMaps:ObjectLiteral!
}
type UserDeleteResult {
	raw:UserOutput!
	affected:Int
}
type UserMutation {
	save(entity: User!, options: SaveOptions): UserOutput!
	remove(entity: User!, options: RemoveOptions): UserOutput!
	insert(options: UserInput!): UserInsertResult!
	update(where: UserFindConditions!, options: User!): UserUpdateResult!
	delete(options: UserFindConditions!): UserDeleteResult!
}
type UserCountResult {
	count:Int!
}
type UserFindResult {
	data:[UserOutput!]!
}
type UserFindAndCountResult {
	count:Int!
	data:[UserOutput!]!
}
type UserFindByIdsResult {
	data:[UserOutput!]!
}
type UserQuery {
	count(options: UserFindManyOptions): UserCountResult!
	find(options: UserFindQuery!): UserFindResult!
	findAndCount(options: UserFindManyOptions!): UserFindAndCountResult!
	findByIds(options: UserFindByIdsQuery!): UserFindByIdsResult!
	findOne(options: UserFindOneQuery!): UserOutput
}
type UserWatchResult {
	data:UserOutput!
	action:MutationType!
}
type UserSubscription {
	watch(options: UserWatchInput!): UserWatchResult!
}
type PostOutput {
	id:Int!
	key:String!
	title:String!
	
	
	user:UserOutput!
}
type PostInsertResult {
	identifiers:ObjectLiteral!
	generatedMaps:ObjectLiteral!
	raw:PostOutput!
}
type PostUpdateResult {
	raw:PostOutput!
	generatedMaps:ObjectLiteral!
}
type PostDeleteResult {
	raw:PostOutput!
	affected:Int
}
type PostMutation {
	save(entity: Post!, options: SaveOptions): PostOutput!
	remove(entity: Post!, options: RemoveOptions): PostOutput!
	insert(options: PostInput!): PostInsertResult!
	update(where: PostFindConditions!, options: Post!): PostUpdateResult!
	delete(options: PostFindConditions!): PostDeleteResult!
}
type PostCountResult {
	count:Int!
}
type PostFindResult {
	data:[PostOutput!]!
}
type PostFindAndCountResult {
	count:Int!
	data:[PostOutput!]!
}
type PostFindByIdsResult {
	data:[PostOutput!]!
}
type PostQuery {
	count(options: PostFindManyOptions): PostCountResult!
	find(options: PostFindQuery!): PostFindResult!
	findAndCount(options: PostFindManyOptions!): PostFindAndCountResult!
	findByIds(options: PostFindByIdsQuery!): PostFindByIdsResult!
	findOne(options: PostFindOneQuery!): PostOutput
}
type PostWatchResult {
	data:PostOutput!
	action:MutationType!
}
type PostSubscription {
	watch(options: PostWatchInput!): PostWatchResult!
}

type Query {
	User:UserQuery!
	userCount(options: UserFindManyOptions): UserCountResult!

	userFind(options: UserFindQuery!): UserFindResult!

	userFindAndCount(options: UserFindManyOptions!): UserFindAndCountResult!

	userFindByIds(options: UserFindByIdsQuery!): UserFindByIdsResult!

	userFindOne(options: UserFindOneQuery!): UserOutput
	Post:PostQuery!
	postCount(options: PostFindManyOptions): PostCountResult!

	postFind(options: PostFindQuery!): PostFindResult!

	postFindAndCount(options: PostFindManyOptions!): PostFindAndCountResult!

	postFindByIds(options: PostFindByIdsQuery!): PostFindByIdsResult!

	postFindOne(options: PostFindOneQuery!): PostOutput

}
type Subscription {
	User:UserSubscription!
userWatch(options: UserWatchInput!): UserWatchResult!
	Post:PostSubscription!
postWatch(options: PostWatchInput!): PostWatchResult!
 
}
type Mutation {
	User:UserMutation!
	userSave(entity: User!, options: SaveOptions): UserOutput!

		userRemove(entity: User!, options: RemoveOptions): UserOutput!

		userInsert(options: UserInput!): UserInsertResult!

		userUpdate(where: UserFindConditions!, options: User!): UserUpdateResult!

		userDelete(options: UserFindConditions!): UserDeleteResult!
	Post:PostMutation!
	postSave(entity: Post!, options: SaveOptions): PostOutput!

		postRemove(entity: Post!, options: RemoveOptions): PostOutput!

		postInsert(options: PostInput!): PostInsertResult!

		postUpdate(where: PostFindConditions!, options: Post!): PostUpdateResult!

		postDelete(options: PostFindConditions!): PostDeleteResult!
 
}
